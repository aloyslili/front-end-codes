const R = require('ramda');


let obj = {
  name: '张三',
  age: 18
};

console.log(R.prop('name', obj));

/*
prop：读取对象的属性
pick：读取对象的多个属性，然后返回有这些属性组成的新对象。
has：在不读取属性值的情况下，想知道对象中是否包含该属性，可以使用 has 来检测对象是否拥有该属性
path：可以读取对象的嵌套属性
propOr 和 pathOr：如果在目标对象中找不到属性或路径的值，它们允许你提供默认值。
keys：返回一个包含对象中所有属性名称的数组。
values：返回这些属性的值组成的数组。
assoc/assocPath：返回一个添加或修改属性的新对象，原对象保持不变
dissoc / dissocPath / omit：删除属性；omit是删除多个
evolve：接受一个对象，其中包含对每个需要转换属性的转换函数。
merge：返回一个包含两个对象的所有属性和值的新对象。如果两个对象具有相同的属性，则采用第二个对象参数的属性值。
    merge 只接受两个参数。如果想要将多个对象合并为一个对象，可以使用 mergeAll，它接受一个需要被合并对象的数组作为参数。
    merge 执行的是浅合并。如果被合并的对象存在属性值为对象的属性，子对象并不会继续嵌套合并。
    如果想递归地进行 "深合并"，可以使用 Ramda 的 mergeDeep 系列函数。


*/
